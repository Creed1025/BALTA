package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.DriveConstants;

public class CANDriveSubsystem extends SubsystemBase {
  private final CANSparkMax leftMaster;
  private final CANSparkMax leftSlave;
  private final CANSparkMax rightMaster;
  private final CANSparkMax rightSlave;

  private final DifferentialDrive drive;

  public CANDriveSubsystem() {
    // motor
    leftMaster = new CANSparkMax(DriveConstants.LEFT_MASTER_ID, MotorType.kBrushed);
    leftSlave = new CANSparkMax(DriveConstants.LEFT_SLAVE_ID, MotorType.kBrushed);
    rightMaster = new CANSparkMax(DriveConstants.RIGHT_MASTER_ID, MotorType.kBrushed);
    rightSlave = new CANSparkMax(DriveConstants.RIGHT_SLAVE_ID, MotorType.kBrushed);

    drive = new DifferentialDrive(leftMaster, rightMaster);

  
    leftMaster.setCANTimeout(250);
    rightMaster.setCANTimeout(250);
    leftSlave.setCANTimeout(250);
    rightSlave.setCANTimeout(250);

    
    leftSlave.follow(leftMaster);
    rightSlave.follow(rightMaster);

    
    leftMaster.enableVoltageCompensation(12.0);
    rightMaster.enableVoltageCompensation(12.0);
    leftMaster.setSmartCurrentLimit(DriveConstants.DRIVE_MOTOR_CURRENT_LIMIT);
    rightMaster.setSmartCurrentLimit(DriveConstants.DRIVE_MOTOR_CURRENT_LIMIT);
    leftSlave.setSmartCurrentLimit(DriveConstants.DRIVE_MOTOR_CURRENT_LIMIT);
    rightSlave.setSmartCurrentLimit(DriveConstants.DRIVE_MOTOR_CURRENT_LIMIT);

  
    leftMaster.setInverted(true);
    rightMaster.setInverted(false);
  }

  @Override
  public void periodic() {
  }

  public void driveArcade(double xSpeed, double zRotation) {
    drive.arcadeDrive(xSpeed, zRotation);
  }
}
